/// @group Abstracts/Functions
/// @name Unit conversion
/// @description
/// 
/// ==========================

/// Unit Conversion Functions
/// =========================
/// 
/// A collection of utility functions for converting between different CSS units.
/// These functions make it easy to maintain consistent measurements across
/// different contexts (screen, print) and unit systems.
/// 
/// ## Table of Contents
/// 
/// 1. px-to-rem($px, $base: 16, $unitless: false)
///    Convert pixels to rem units
/// 
/// 2. rem-to-px($rem, $base: 16, $unitless: false)
///    Convert rem units to pixels
/// 
/// 3. px-to-pt($px, $unitless: false)
///    Convert pixels to points
/// 
/// 4. pt-to-px($pt, $unitless: false)
///    Convert points to pixels
/// 
/// 5. rem-to-pt($rem, $base: 16, $unitless: false)
///    Convert rem units to points
/// 
/// 6. pt-to-rem($pt, $base: 16, $unitless: false)
///    Convert points to rem units

@use '../variables/__index__' as var;

@use 'sass:math';

/// 1.
/// Converts pixel value to rem value
/// ---------------------------------
/// Transforms pixel-based measurements to relative rem units for scalable, 
/// accessible designs that respect user font-size preferences.
/// 
/// @param {Number} $px - Value in pixels to convert
/// @param {Number} $base [16] - Base font size in pixels
/// @param {Boolean} $unitless [false] - Whether to return a unitless number
/// 
/// @returns {Number} Value in rem units (or unitless if specified)
/// 
/// @example
///   px-to-rem(32) => 2rem
///   px-to-rem(32, 8) => 4rem
///   px-to-rem(32, 16, true) => 2
///   font-size: px-to-rem(24); => font-size: 1.5rem;

@function px-to-rem(
  $px,
  $base: 16,
  $unitless: false
) {
  $result: math.div($px, $base);
  @return if($unitless, $result, $result * 1rem);
}

/// 2.
/// Converts rem value to pixel value
/// ---------------------------------
/// Transforms relative rem units to absolute pixels, useful for calculating
/// exact dimensions or when integrating with pixel-based systems.
/// 
/// @param {Number} $rem - Value in rem to convert
/// @param {Number} $base [16] - Base font size in pixels
/// @param {Boolean} $unitless [false] - Whether to return a unitless number
/// 
/// @returns {Number} Value in pixels (or unitless if specified)
/// 
/// @example
///   rem-to-px(2) => 32px
///   rem-to-px(2, 8) => 16px
///   rem-to-px(1.5, 16, true) => 24
///   height: rem-to-px(3.75); => height: 60px;

@function rem-to-px(
  $rem,
  $base: 16,
  $unitless: false
) {
  $result: $rem * $base;
  @return if($unitless, $result, $result * 1px);
}

/// 3.
/// Converts pixel value to point value
/// ----------------------------------
/// Transforms pixel units to points (pt), primarily useful for print-focused 
/// stylesheets where point measurements are standard.
/// 
/// @param {Number} $px - Value in pixels to convert
/// @param {Boolean} $unitless [false] - Whether to return a unitless number
/// 
/// @returns {Number} Value in points (or unitless if specified)
/// 
/// @example
///   px-to-pt(20) => 15pt
///   px-to-pt(40, true) => 30
///   font-size: px-to-pt(16); => font-size: 12pt;
///
/// Note: Uses the standard conversion ratio of 1pt = 1.333333px (72pt/inch รท 96px/inch)

@function px-to-pt(
  $px,
  $unitless: false
) {
  // 1pt = 1.333333px (72pt/inch / 96px/inch)
  $result: math.div($px, 1.333333);
  @return if($unitless, $result, $result * 1pt);
}

/// 4.
/// Converts point value to pixel value
/// ----------------------------------
/// Transforms point units to pixels, useful when converting print-focused 
/// designs for screen display.
/// 
/// @param {Number} $pt - Value in points to convert
/// @param {Boolean} $unitless [false] - Whether to return a unitless number
/// 
/// @returns {Number} Value in pixels (or unitless if specified)
/// 
/// @example
///   pt-to-px(12) => 16px
///   pt-to-px(9, true) => 12
///   width: pt-to-px(24); => width: 32px;
///
/// Note: Uses the standard conversion ratio of 1px = 0.75pt (96px/inch รท 72pt/inch)

@function pt-to-px(
  $pt,
  $unitless: false
) {
  // 1px = 0.75pt (96px/inch / 72pt/inch)
  $result: $pt * 1.333333;
  @return if($unitless, $result, $result * 1px);
}

/// 5.
/// Converts rem value to point value
/// --------------------------------
/// Transforms relative rem units to absolute point units, useful for creating
/// print stylesheets that maintain proportions from screen designs.
/// 
/// @param {Number} $rem - Value in rem to convert
/// @param {Number} $base [16] - Base font size in pixels
/// @param {Boolean} $unitless [false] - Whether to return a unitless number
/// 
/// @returns {Number} Value in points (or unitless if specified)
/// 
/// @example
///   rem-to-pt(1.5) => 18pt
///   rem-to-pt(2, 10) => 15pt
///   rem-to-pt(4, 16, true) => 48
///   font-size: rem-to-pt(1); => font-size: 12pt;

@function rem-to-pt(
  $rem,
  $base: 16,
  $unitless: false
) {
  // First convert rem to px (rem * base), then px to pt
  $px: $rem * $base;
  $result: math.div($px, 1.333333);
  @return if($unitless, $result, $result * 1pt);
}

/// 6.
/// Converts point value to rem value
/// --------------------------------
/// Transforms absolute point units to relative rem units, useful when adapting
/// print-focused designs for responsive web layouts.
/// 
/// @param {Number} $pt - Value in points to convert
/// @param {Number} $base [16] - Base font size in pixels
/// @param {Boolean} $unitless [false] - Whether to return a unitless number
/// 
/// @returns {Number} Value in rem (or unitless if specified)
/// 
/// @example
///   pt-to-rem(24) => 2rem
///   pt-to-rem(15, 10) => 2rem
///   pt-to-rem(18, 16, true) => 1.5
///   margin: pt-to-rem(12); => margin: 1rem;

@function pt-to-rem(
  $pt,
  $base: 16,
  $unitless: false
) {
  // First convert pt to px (pt * 1.333333), then px to rem
  $px: $pt * 1.333333;
  $result: math.div($px, $base);
  @return if($unitless, $result, $result * 1rem);
}